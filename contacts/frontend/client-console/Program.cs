using System.Net;
using System.Net.Http.Headers;

using Contacts.Client.Console.DTOs;
using System.Text.Json;

// R(-ead)

{
    // read all contacts

    Console.WriteLine("GetContacts:\n");

    var contactDtos = await GetContacts();

    foreach (var contactDto in contactDtos)
    {
        Console.WriteLine($"{contactDto.Id} {contactDto.FirstName} {contactDto.LastName} {contactDto.Email}");
    }

    // read a single contact

    Console.WriteLine("\nGetContact:\n");

    var id = 1;

    var contactDetailsDto = await GetContact(id);

    if (contactDetailsDto is not null)
    {
        Console.WriteLine($"{contactDetailsDto.Id} {contactDetailsDto.FirstName} {contactDetailsDto.LastName} {contactDetailsDto.Email}");
    }
    else
    {
        Console.WriteLine($"Contact with id {id} not found");
    }
}

static async Task<List<ContactDto>> GetContacts()
{
    var httpClient = new HttpClient();

    // our API requires Accept: application/json
    httpClient.DefaultRequestHeaders.Accept.Clear();
    httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

    var response = await httpClient.GetAsync("https://localhost:5001/api/contacts");

    // we want to make sure that the API responded with 200 OK, if not we throw an exception
    response.EnsureSuccessStatusCode();

    var content = await response.Content.ReadAsStringAsync();

    // our API returns JSON in camelCase, we want to deserialize it to PascalCase
    var jsonSerializerOptions = new JsonSerializerOptions
    {
        PropertyNameCaseInsensitive = true
    };
    var contactDtos = JsonSerializer.Deserialize<List<ContactDto>>(content, jsonSerializerOptions);
    // there is a chance that the API returns null, so we need to check for that
    contactDtos ??= Enumerable.Empty<ContactDto>().ToList();

    return contactDtos;
}

static async Task<ContactDetailsDto?> GetContact(int id)
{
    var httpClient = new HttpClient();
    httpClient.DefaultRequestHeaders.Accept.Clear();
    httpClient.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

    var response = await httpClient.GetAsync($"https://localhost:5001/api/contacts/{id}");

    if (response.StatusCode == HttpStatusCode.NotFound)
    {
        return null;
    }

    response.EnsureSuccessStatusCode();

    var content = await response.Content.ReadAsStringAsync();

    // because this class was generated by NSwagStudio, we don't need to worry about the casing, as it is
    // handled by the generated code (attributes)
    var contactDetailsDto = JsonSerializer.Deserialize<ContactDetailsDto>(content);

    return contactDetailsDto;
}

//static void CreateContact(ContactForCreationDto contact)
//{
//    // TODO:
//}

//static void UpdateContact(int id, ContactForUpdateDto contact)
//{
//    // TODO:
//}

//static void DeleteContact(int id)
//{
//    // TODO:
//}